require("tidyverse")
install.packages("jsonlite")
require("tidyverse")
require("tidyverse")
require("jsonlite")
settings <- read_json("settings.json", simplifyVector = TRUE)
book_lines <- read_lines("data.txt")
require("tidyverse")
require("jsonlite")
settings <- read_json("r/settings.json", simplifyVector = TRUE)
book_lines <- read_lines("r/data.txt")
View(settings)
df <- data.frame(unlist(settings))
View(df)
df <- data.frame(settings)
View(df)
require("tidyverse")
require("jsonlite")
settings <- read_json("r/settings.json", simplifyVector = TRUE)
df <- data.frame(settings)
book_lines <- read_lines("r/data.txt")
settings <- read_json("r/settings.json")
View(settings)
settins$id
settings$id
settings$removePunctuation
settings$numCount
settings$plotWidth
settings$caseSensitive
settings$chartTitle
if(settings$removePunctuation){
# Remove the punctuation from the book
lines <- gsub('[[:punct:]]+','',lines)
}
require("tidyverse")
require("jsonlite")
settings <- read_json("r/settings.json")
lines <- read_lines("r/data.txt")
if(settings$removePunctuation){
# Remove the punctuation from the book
lines <- gsub('[[:punct:]]+','',lines)
}
# Split the data by spaces
words <- strsplit(lines," ",fixed = T)
# Remove "character(0)" type
words <- words[!sapply(words, identical, character(0))]
# Flatten the list
words <- flatten(words)
if(!settings$caseSensitive){
# Covert all the words to lowercase
words <- lapply(words, tolower)
}
require("tidyverse")
require("jsonlite")
settings <- read_json("r/settings.json")
lines <- read_lines("r/data.txt")
if(settings$removePunctuation){
# Remove the punctuation from the book
lines <- gsub('[[:punct:]]+','',lines)
}
# Split the data by spaces
words <- strsplit(lines," ",fixed = T)
# Remove "character(0)" type
words <- words[!sapply(words, identical, character(0))]
# Flatten the list
words <- flatten(words)
if(!settings$caseSensitive){
# Covert all the words to lowercase
words <- lapply(words, tolower)
}
View(words)
require("tidyverse")
require("jsonlite")
settings <- read_json("r/settings.json")
lines <- read_lines("r/data.txt")
if(settings$removePunctuation){
# Remove the punctuation from the book
lines <- gsub('[[:punct:]]+','',lines)
}
# Split the data by spaces
words <- strsplit(lines," ",fixed = T)
# Remove "character(0)" type
words <- words[!sapply(words, identical, character(0))]
# Flatten the list
words <- flatten(words)
if(!settings$caseSensitive){
# Covert all the words to lowercase
words <- lapply(words, tolower)
}
# Convert the list to a dataframe
words_df = data.frame(unlist(words))
View(words_df)
# Count the number of words
count <- words_df %>%
group_by(unlist.words.) %>%
filter(!unlist.words.=="") %>%
count(sort=TRUE) %>%
arrange(desc(n)) %>%
head(settings$numCount)
# Determine the maximum value of n
maxval = head(count,1)$n
# Add row number as a column
count <- tibble::rowid_to_column(count, "row_number")
# Add Zipf value based on the maximum value of n
count <- count %>%
filter(!is.na(unlist.words.)) %>%
arrange(desc(n)) %>%
mutate(zipfval = maxval/row_number)
# Plot the findings
ggplot(count, aes(x=reorder(unlist.words., -n), y=n)) +
geom_bar(stat = "identity", fill="deepskyblue1") +
geom_bar(aes(y=zipfval),stat = "identity", fill="dodgerblue4") +
geom_line(aes(x=row_number, y=n, color="Actual frequency"), size=1) +
geom_line(aes(x=row_number, y=zipfval, color="Zipf frequency"), size=1) +
coord_cartesian(xlim = c(0, 50), ylim = c(0, maxval)) +
labs(title=settings$chartTitle,
subtitle="Word frequency in the hunger games",
x="Word",
y="Frequency",
colour="") +
theme(axis.text.x = element_text(angle = 90))
settings$chartSubTitle
settings$plotWidth
# Plot the findings
p <- ggplot(count, aes(x=reorder(unlist.words., -n), y=n)) +
geom_bar(stat = "identity", fill="deepskyblue1") +
geom_bar(aes(y=zipfval),stat = "identity", fill="dodgerblue4") +
geom_line(aes(x=row_number, y=n, color="Actual frequency"), size=1) +
geom_line(aes(x=row_number, y=zipfval, color="Zipf frequency"), size=1) +
coord_cartesian(xlim = c(0, 50), ylim = c(0, maxval)) +
labs(title=settings$chartTitle,
subtitle="Word frequency in the hunger games",
x="Word",
y="Frequency",
colour="") +
theme(axis.text.x = element_text(angle = 90))
ggsave(c(settings$id,".png"), plot = p, width = settings$plotWidth)
ggsave(c(settings$id,".png"), plot = p,device = NULL, width = settings$plotWidth)
ggsave(c(settings$id,".png"), plot = p, device = NULL, width = settings$plotWidth)
ggsave(c(settings$id,".png"), plot = p, device = "NULL", width = settings$plotWidth)
ggsave(c(settings$id,".png"), plot = p, device = NULL, width = settings$plotWidth)
c(settings$id,".png")
paste(settings$id,".png")
paste(c(settings$id,".png"),"")
paste(c(settings$id,".png"),"-")
str_c(settings$id,".png")
ggsave(str_c(settings$id,".png"), plot = p, device = NULL, width = settings$plotWidth)
ggsave(str_c(settings$id,".png"), plot = p, device = NULL)
